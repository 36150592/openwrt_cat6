. /lib/functions.sh
local REMOTE_MINI_HTTP_LISTEN_PORT=`cat /tz_www/mini_httpd.conf | grep port | cut -d'=' -f2`
local REMOTE_MINI_HTTPS_LISTEN_PORT=`cfg -g TZ_HTTPS_PORT --section web`
local TZ_REMOTE_LOGIN=`cfg -g  TZ_REMOTE_LOGIN --section remote_control`
local TZ_REMOTE_DEFAULT_LIST=`cfg -g  TZ_REMOTE_DEFAULT_LIST --section remote_control`
local TZ_REMOTE_LOGIN_LIST=`cfg -g  TZ_REMOTE_LOGIN_LIST --section remote_control`
local TZ_REMOTE_PING=`cfg -g  TZ_REMOTE_PING --section remote_control`
local TZ_REMOTE_PING_LIST=`cfg -g  TZ_REMOTE_PING_LIST --section remote_control`
local TZ_REMOTE_DEFAULT_LIST_AUTH=`cfg -g TZ_REMOTE_DEFAULT_LIST_AUTH --section remote_control`
local TZ_DMZ_ENABLE=`cfg -g TZ_DMZ_ENABLE --section dmz`
local TZ_ARP_LIST=`cfg -g TZ_ARP_ITEM --section arp_bind`

if [ $REMOTE_MINI_HTTP_LISTEN_PORT'' == '' ];then
        REMOTE_MINI_HTTP_LISTEN_PORT=80
fi

if [ $REMOTE_MINI_HTTPS_LISTEN_PORT'' == '' ];then
        REMOTE_MINI_HTTPS_LISTEN_PORT=443
fi




#the abobe lines can not be move to other position
local wan_sections=""
local lan_sections=""
local inter_sections=""
local wan_interfaces=""
load_interface() {
        local cfgfile="$1"
        DEVICES=
        config_cb() {
                local type="$1"
                local section="$2"

                config_get TYPE "$CONFIG_SECTION" TYPE
                case "$TYPE" in
                        interface)
								local type=""
                                config_get ifname "$CONFIG_SECTION" ifname
                                config_get type "$CONFIG_SECTION" type
                                if [  $type ];then
									if [ $type == "bridge" ]
                                	then 
				       					lan_sections="$lan_sections $CONFIG_SECTION"

                                	fi
								else
									if [ $CONFIG_SECTION != "loopback" -a `echo $wan_interfaces | grep $ifname |wc -l ` == "0" ]
									then
                                		wan_sections="$wan_sections $CONFIG_SECTION"
										wan_interfaces="$wan_interfaces $ifname"
									fi
								fi                                     

                                append inter_sections "$CONFIG_SECTION"
                        ;;
                esac                     
        }                                
        config_load "${cfgfile:-network}"
}    

redirect_lan(){
	for lan in $lan_sections
	do
                if [ $lan'' == '' ];then                                              
                        continue                                                                
                fi                                                    
                config_get gateip $lan ipaddr
                iptables -t nat -I PREROUTING -i br-$lan -p tcp -d $gateip --dport 80 -j REDIRECT --to-ports $REMOTE_MINI_HTTP_LISTEN_PORT
                iptables -t nat -I PREROUTING -i br-$lan -p udp -d $gateip --dport 80 -j REDIRECT --to-ports $REMOTE_MINI_HTTP_LISTEN_PORT
                                                                    
                iptables -t nat -I PREROUTING -i br-$lan -p tcp -d $gateip --dport 443 -j REDIRECT --to-ports $REMOTE_MINI_HTTPS_LISTEN_PORT
                iptables -t nat -I PREROUTING -i br-$lan -p udp -d $gateip --dport 443 -j REDIRECT --to-ports $REMOTE_MINI_HTTPS_LISTEN_PORT
	done

}

drop_wan(){
	for wan in $wan_interfaces
	do
                if [ $wan'' == '' ];then
                        continue
                fi
                iptables -I INPUT -i $wan -p tcp --dport $REMOTE_MINI_HTTP_LISTEN_PORT -j DROP
                iptables -I INPUT -i $wan -p udp --dport $REMOTE_MINI_HTTP_LISTEN_PORT -j DROP

                iptables -I INPUT -i $wan -p tcp --dport $REMOTE_MINI_HTTPS_LISTEN_PORT -j DROP
                iptables -I INPUT -i $wan -p udp --dport $REMOTE_MINI_HTTPS_LISTEN_PORT -j DROP

	done

}

turn_off_remote_web_login(){
	drop_wan

        if [ "${TZ_REMOTE_DEFAULT_LIST_AUTH}" = "1" ]; then
            for ip in $TZ_REMOTE_DEFAULT_LIST
            do
                    if [ $ip'' == '' ];then
                            continue
                    fi
                    iptables -I INPUT -s $ip -p tcp --dport $REMOTE_MINI_HTTPS_LISTEN_PORT -j ACCEPT
                    iptables -I INPUT -s $ip -p udp --dport $REMOTE_MINI_HTTPS_LISTEN_PORT -j ACCEPT
            done
        fi

       
}

turn_on_remote_web_login(){
        drop_wan

        for ip in $TZ_REMOTE_DEFAULT_LIST
        do
                if [ $ip'' == '' ];then
                        continue
                fi
                iptables -I INPUT -s $ip -p tcp --dport $REMOTE_MINI_HTTPS_LISTEN_PORT -j ACCEPT
                iptables -I INPUT -s $ip -p udp --dport $REMOTE_MINI_HTTPS_LISTEN_PORT -j ACCEPT
        done

        for ip in $TZ_REMOTE_LOGIN_LIST
        do
                if [ $ip'' == '' ];then
                        continue
                fi
                iptables -I INPUT -s $ip -p tcp --dport $REMOTE_MINI_HTTPS_LISTEN_PORT -j ACCEPT
                iptables -I INPUT -s $ip -p udp --dport $REMOTE_MINI_HTTPS_LISTEN_PORT -j ACCEPT
        done
}


turn_off_remote_ping(){
	
	for wan in $wan_interfaces
	do
                if [ $wan'' == '' ];then
                        continue
                fi
                iptables  -I INPUT -i $wan -p icmp -j DROP
                iptables  -I INPUT -i $wan -p icmp --icmp-type 0 -j ACCEPT
	done


    if [ "${TZ_REMOTE_DEFAULT_LIST_AUTH}" = "1" ]; then
        for ip in $TZ_REMOTE_DEFAULT_LIST
        do
                if [ $ip'' == '' ];then
                        continue
                fi
                iptables -I INPUT -s $ip -p icmp  -j ACCEPT
        done
    fi
}


turn_on_remote_ping(){
        
        for wan in $wan_interfaces
        do
                if [ $wan'' == '' ];then
                        continue
                fi
                iptables  -I INPUT -i $wan -p icmp -j DROP
                iptables  -I INPUT -i $wan -p icmp --icmp-type 0 -j ACCEPT
        done

        for ip in $TZ_REMOTE_DEFAULT_LIST
        do
                if [ $ip'' == '' ];then
                        continue
                fi
                iptables -I INPUT -s $ip -p icmp -j ACCEPT
        done

        for ip in $TZ_REMOTE_PING_LIST
        do
                if [ $ip'' == '' ];then
                        continue
                fi
               iptables -I INPUT -s $ip -p icmp  -j ACCEPT

        done
}


set_dmz(){
	
#iptables -I PREROUTING -t nat -i  br-lan -d 10.23.16.11 -j DNAT --to-destination 192.168.2.111
#iptables -I POSTROUTING -d 192.168.2.111  -j MASQUERADE

	local host_ip=`cfg -g TZ_DMZ_HOST_IP --section dmz`	
    [ $host_ip"" == "" ] && return 
    for wan in $wan_interfaces
	do	
		iptables -t nat -I PREROUTING -i $wan -j DNAT --to-destination $host_ip
	done



    for wan in $wan_sections
    do
        if [ $wan"" == "4g" ];then
            local en=`cfg -g TZ_DIALTOOL2_NAT_LOOKBACK --section modem`
            if [ $en"" != "disable" ];then
                config_get ifname $wan ifname
                config_get route_lan_section $wan route_lan_section
                local ip=`ifconfig $ifname | grep "inet addr" | awk '{print $2}' | awk -F':'  '{print $2}'`

                [ $ip"" == "" -o $route_lan_section"" == "" ] && continue

                iptables -I PREROUTING -t nat -i  br-${route_lan_section} -d $ip -j DNAT --to-destination $host_ip 
                #iptables -I POSTROUTING -t nat -d $host_ip -j MASQUERADE
            fi


        elif [ $wan"" == "4g1" ];then
            local en=`cfg -g TZ_MUTILAPN1_NAT_LOOKBACK --section modem`
            if [ $en"" != "disable" ];then
                config_get ifname $wan ifname
                config_get route_lan_section $wan route_lan_section
                local ip=`ifconfig $ifname | grep "inet addr" | awk '{print $2}' | awk -F':'  '{print $2}'`

                [ $ip"" == "" -o $route_lan_section"" == "" ] && continue

                iptables -I PREROUTING -t nat -i  br-${route_lan_section} -d $ip -j DNAT --to-destination $host_ip 
                #iptables -I POSTROUTING -t nat -d $host_ip -j MASQUERADE
            fi

        elif [ $wan"" == "4g2" ];then
            local en=`cfg -g TZ_MUTILAPN2_NAT_LOOKBACK --section modem`
            if [ $en"" != "disable" ];then
                config_get ifname $wan ifname
                config_get route_lan_section $wan route_lan_section
                local ip=`ifconfig $ifname | grep "inet addr" | awk '{print $2}' | awk -F':'  '{print $2}'`

                [ $ip"" == "" -o $route_lan_section"" == "" ] && continue

                iptables -I PREROUTING -t nat -i  br-${route_lan_section} -d $ip -j DNAT --to-destination $host_ip 
                #iptables -I POSTROUTING -t nat -d $host_ip  -j MASQUERADE
            fi
        fi


    done

    iptables -I POSTROUTING -t nat -d $host_ip  -j MASQUERADE
}


set_user_static_route(){
        local rows=`cat /etc/config/tozed | grep TZ_STATIC_ROUTE | wc -l `
        local ip
        local netmask
        local network
        local table_name
        local i=1

        ip rule del pref 100
        while [ `echo $?` == "0"  ]
        do
           ip rule del pref 100  2> /dev/null
        done


        local table_num=10
        [ `cat /etc/iproute2/rt_tables | grep "user_static_route" | wc -l` == "0" ] && {

            while [ `cat /etc/iproute2/rt_tables | grep "^$table_num	" | wc -l` != 0 ]
            do
                table_num=$(($table_num+1))
            done                
            echo "$table_num	user_static_route" >> /etc/iproute2/rt_tables 
        }

        ip route flush table user_static_route

        while [ $i -le $rows ]
        do
                item=`cat /etc/config/tozed | grep TZ_STATIC_ROUTE | sed -n ${i}p | sed  s/\'//g `
                let i=$i+1
                local ifname=`echo $item | awk '{print $3}'`
                local target_ip=`echo $item | awk '{print $4}'`
                local target_netmask=`echo $item | awk '{print $5}'`
                local next_ip=`echo $item | awk '{print $6}'`  

		local target_prefix=`ipcalc.sh $target_ip $target_netmask | grep NETMASK | cut -d'=' -f 2`


                ip route add ${target_ip}/${target_prefix} table user_static_route via $next_ip dev $ifname 
                ip rule add  to  ${target_ip}/${target_prefix} table user_static_route pref 100

        done 

} 

arp_bind(){

    for var  in $TZ_ARP_LIST
    do
	local en=${var:0:1}
	local ip=${var%%-*}        
	local mac=${var#*-}    
	if [ $en == "#" ];then
		continue
	fi   
#	echo ip=$ip
#	echo mac=$mac
	/sbin/arp -s $ip $mac
    done

}


load_interface

#redirect_lan

if [ $TZ_REMOTE_LOGIN"" == "1" ];then
        turn_on_remote_web_login
else
        turn_off_remote_web_login
fi

if [ $TZ_REMOTE_PING"" == "1" ];then
        turn_on_remote_ping
else
        turn_off_remote_ping
fi

set_user_static_route

if [ $TZ_DMZ_ENABLE"" == "1" ];then
	set_dmz

fi

arp_bind

echo -n 


