--- a/drivers/spi/spi-mt7621.c
+++ b/drivers/spi/spi-mt7621.c
@@ -263,6 +263,106 @@ msg_done:
 	return 0;
 }
 
+static int tzmt7621_spi_transfer_half_duplex(struct spi_master *master,
+					   struct spi_message *m)
+{
+	struct mt7621_spi *rs = spi_master_get_devdata(master);
+	struct spi_device *spi = m->spi;
+	unsigned int speed = spi->max_speed_hz;
+	struct spi_transfer *t = NULL;
+	int status = 0;
+	int i, len = 0;
+	int rx_len = 0;
+	u32 data[9] = { 0 };
+	u32 val;
+
+	mt7621_spi_wait_till_ready(spi);
+
+	list_for_each_entry(t, &m->transfers, transfer_list) {
+		const u8 *buf = t->tx_buf;
+
+		if (t->rx_buf)
+			rx_len += t->len;
+
+		if (!buf)
+			continue;
+
+		if (WARN_ON(len + t->len > 36)) {
+			status = -EIO;
+			goto msg_done;
+		}
+
+		for (i = 0; i < t->len; i++, len++)
+			data[len / 4] |= buf[i] << (8 * (len & 3));
+	}
+
+	if (WARN_ON(rx_len > 32)) {
+		status = -EIO;
+		goto msg_done;
+	}
+
+	if (mt7621_spi_prepare(spi, speed)) {
+		status = -EIO;
+		goto msg_done;
+	}
+	data[0] = swab32(data[0]);
+	if (len < 4)
+		data[0] >>= (4 - len) * 8;
+
+	//if(get_slic_dbg_flag() && strcmp(dev_name(&spi->dev), "spi32766.1")==0)
+	//	tzk_dbg("one spi transfer txLen=%d rxLen=%d", len, rx_len);
+
+	for (i = 0; i < len; i += 4)
+	{
+		mt7621_spi_write(rs, MT7621_SPI_OPCODE + i, data[i / 4]);
+		//if(get_slic_dbg_flag() && strcmp(dev_name(&spi->dev), "spi32766.1")==0)
+		//	tzk_dbg("	send=%02x", data[i / 4]);
+	}
+
+	val = (min_t(int, len, 4) * 8) << 24;
+	if (len > 4)
+		val |= (len - 4) * 8;
+	val |= (rx_len * 8) << 12;
+	mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
+
+	mt7621_spi_set_cs(spi, 1);
+
+	val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
+	val |= SPI_CTL_START;
+	mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
+
+	mt7621_spi_wait_till_ready(spi);
+
+	mt7621_spi_set_cs(spi, 0);
+
+	for (i = 0; i < rx_len; i += 4)
+	{
+		
+		data[i / 4] = mt7621_spi_read(rs, MT7621_SPI_DATA4 + i);
+		//if(get_slic_dbg_flag() && strcmp(dev_name(&spi->dev), "spi32766.1")==0)
+		//	tzk_dbg("	recv[%02x]=%02x", MT7621_SPI_DATA4 + i, data[i / 4]);
+	}
+	
+	m->actual_length = len + rx_len;
+
+	len = 0;
+	list_for_each_entry(t, &m->transfers, transfer_list) {
+		u8 *buf = t->rx_buf;
+
+		if (!buf)
+			continue;
+
+		for (i = 0; i < t->len; i++, len++)
+			buf[i] = data[len / 4] >> (8 * (len & 3));
+	}
+
+msg_done:
+	m->status = status;
+	spi_finalize_current_message(master);
+
+	return 0;
+}
+
 static int mt7621_spi_transfer_full_duplex(struct spi_master *master,
 					   struct spi_message *m)
 {
@@ -355,7 +455,7 @@ static int mt7621_spi_transfer_one_messa
 	int cs = spi->chip_select;
 
 	if (cs)
-		return mt7621_spi_transfer_full_duplex(master, m);
+		return tzmt7621_spi_transfer_half_duplex(master, m);
 	return mt7621_spi_transfer_half_duplex(master, m);
 }
 
